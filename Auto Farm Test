_G.auto = true

-- üì¶ D·ªãch v·ª• ROBLOX
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- üßç Ng∆∞·ªùi ch∆°i
local player = Players.LocalPlayer
local gui = player:WaitForChild("PlayerGui")

-- ‚öôÔ∏è Bi·∫øn tr·∫°ng th√°i
local _isInGame = false
local currentFruit = nil
local currentHumanoid = nil
local characterReady = false

-- üí• Danh s√°ch k·ªπ nƒÉng theo tr√°i √°c qu·ª∑
local skills = {
    DoughV2 = {"GrilledLance", "ElasticLasso", "Oblivion", "PowerDough", "BlazingStorm", "ScorchingBuzzcut"},
    Ope = {"Room", "Takt", "Wreckage", "HurricaneShock", "GammaKnife", "Mes", "Shambles"},
    LeopardV2 = {"FingerPistolBarrage", "SonicKick", "InfinityDrive", "UnrelentingAssault", "Transform", "HeavensDemise"},
    Lightning = {"VoltageUp", "LightningPalm", "CrashingThunder", "ProjectedBurst", "CrushingJudgment", "Raigo"},
    Nika = {"RocGun", "NeoRedHawk", "RocGatling", "RedRoc", "DrumsOfLiberation", "Gear5", "SpinningTop", "DawnRocket", "MolePistolCombo", "RisingBolt", "GigantStamp", "BajrangGun"},
    DragonV2 = {"InfernoBreath", "ThunderBagua", "DragonTwister", "BeastsBellow", "Transform", "BoloFrenzy", "FlamingTorch", "Demolition", "Transformation"},
    Soul = {"EnthralGrasp", "ScorchingSickle", "ZeusMeadow", "CrimsonPillar", "Transform", "MaserCannon"},
    DarkXQuake = {"AntiQuake", "BlackHolePath", "BlackTurret", "NeoKurouzuCombo", "AntiBody", "QuadraSeaQuake"},
    Okuchi = {"PrimalRage", "ArcticBreath", "DevastatingDrop", "HallowedCuts", "GlacialCoat", "DivineSerpent"},
}

-- üß¨ C·∫≠p nh·∫≠t tr√°i hi·ªán t·∫°i
local function updateCurrentFruit()
    local mainData = player:FindFirstChild("MAIN_DATA")
    if not mainData then return end
    local currentSlot = mainData:FindFirstChild("Slot")
    if not currentSlot then return end
    local slotValue = mainData.Slots:FindFirstChild(tostring(currentSlot.Value))
    currentFruit = slotValue and slotValue.Value or nil
end

-- üëÄ Theo d√µi thay ƒë·ªïi slot tr√°i
local function watchSlotChanges()
    local mainData = player:WaitForChild("MAIN_DATA", 10)
    if not mainData then return end
    local slot = mainData:WaitForChild("Slot", 5)
    if not slot then return end
    slot:GetPropertyChangedSignal("Value"):Connect(updateCurrentFruit)
    updateCurrentFruit()
end

-- üí• G·ªçi k·ªπ nƒÉng tr√°i
local function castSkill(fruit, skill)
    if not fruit or not skill then return end
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local target = hrp.Position + hrp.CFrame.LookVector * 50
    local dir = (target - hrp.Position).Unit * 45
    local ray = {
        Normal = Vector3.yAxis,
        Direction = dir,
        Origin = hrp.Position,
        Instance = workspace.Map:FindFirstChildWhichIsA("BasePart") or workspace.Terrain,
        Distance = (target - hrp.Position).Magnitude,
        Material = Enum.Material.Grass,
        Position = target
    }
    ReplicatedStorage.Replicator:InvokeServer(fruit, skill, {Ground = {Position = target}, MouseRay = ray})
    ReplicatedStorage.ReplicatorNoYield:FireServer("ClientData", "UpdateData", {RootCF = hrp.CFrame, MouseRay = ray})
end

-- üîç T√¨m n√∫t Play
local function findPlayButton()
    for _, guiObj in ipairs(gui:GetChildren()) do
        if guiObj:IsA("ScreenGui") then
            local btn = guiObj:FindFirstChild("Play", true)
            if btn and btn:IsA("GuiButton") then
                return btn
            end
        end
    end
    return nil
end

-- ‚å®Ô∏è Nh·∫•n Enter
local function pressEnter()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
    task.wait(0.05)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
end

-- üìç D·ªãch chuy·ªÉn
local function fastTeleport()
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp
    repeat hrp = character:FindFirstChild("HumanoidRootPart") task.wait() until hrp
    hrp.CFrame = CFrame.new(-1420, 798.93, -85)
end

-- üß† C√†i nh√¢n v·∫≠t (ƒë√£ s·ª≠a ·ªïn ƒë·ªãnh h∆°n)
local function setupCharacter(character)
    characterReady = false
    currentHumanoid = character:WaitForChild("Humanoid", 5)
    local hrp = character:WaitForChild("HumanoidRootPart", 5)
    if not hrp or not currentHumanoid then return end

    task.spawn(function()
        local maxWait = 5
        local elapsed = 0
        while elapsed < maxWait do
            updateCurrentFruit()
            if currentFruit and hrp.Parent == character and hrp:IsDescendantOf(game) then
                characterReady = true
                break
            end
            elapsed += 0.2
            task.wait(0.2)
        end
    end)
end

-- üëÇ Theo d√µi nh√¢n v·∫≠t m·ªõi
if player.Character then setupCharacter(player.Character) end

player.CharacterAdded:Connect(function(char)
    characterReady = false
    _isInGame = true
    setupCharacter(char)
end)

-- ‚ñ∂Ô∏è T·ª± nh·∫•n Play v√† teleport
task.spawn(function()
    while true do
        while not (player.Character and player.Character:FindFirstChild("HumanoidRootPart")) do
            local playButton = findPlayButton()
            if playButton then
                GuiService.SelectedObject = playButton
                task.wait(5)
                pressEnter()
                task.delay(1, function()
                    fastTeleport()
                end)
            end
            task.wait(5)
        end
        repeat task.wait(0.5) until not (player.Character and player.Character:FindFirstChild("HumanoidRootPart"))
        _isInGame = false
        characterReady = false
    end
end)

-- üîÅ D√πng k·ªπ nƒÉng li√™n t·ª•c
task.spawn(function()
    while true do
        if _G.auto and _isInGame and characterReady and currentFruit and skills[currentFruit] then
            for _, skill in ipairs(skills[currentFruit]) do
                if not (_isInGame and characterReady) then break end
                castSkill(currentFruit, skill)
                task.wait(0.25)
            end
        else
            task.wait(0.5)
        end
    end
end)

watchSlotChanges()
